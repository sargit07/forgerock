apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    # haproxy.router.openshift.io/cookie_name: route
    cert-manager.io/cluster-issuer: $(CERT_ISSUER)
    haproxy-ingress.github.io/config-global: |
        log global
        mode http
        option  dontlognull
        option  forwardfor
        retries 0
        option redispatch
        option http-keep-alive
        option prefer-last-server
        timeout http-keep-alive 620000
        timeout connect 10000
        timeout client  50000
        timeout server  180000
        timeout tunnel 2m
        default-server init-addr last,libc,none
    haproxy-ingress.github.io/config-frontend: |
        capture request header User-Agent len 50
        http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload;"
        monitor-uri /proxy/isAlive.html
        var-namespace true
    haproxy-ingress.github.io/config-sections: |
      resolvers k8s
          parse-resolv-conf
          hold timeout         600s
          hold refused         600s
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/session-cookie-hash: sha1
    nginx.ingress.kubernetes.io/session-cookie-name: route
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # CORS is now set in the AM and IDM configurations
    nginx.ingress.kubernetes.io/enable-cors: "false"
    nginx.ingress.kubernetes.io/body-size: "64m"
    nginx.ingress.kubernetes.io/send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: "64m"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    # RCS Agent websockets
    nginx.org/websocket-services: "rcs-agent"
    nginx.ingress.kubernetes.io/websocket-services: "rcs-agent"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-ForgeRock-TransactionId $req_id;
      proxy_set_header X-ForgeRock-TransactionId $req_id;
  name: forgerock
spec:
  ingressClassName: "nginx"
  rules:
  - host: $(FQDN)
    http:
      paths:
      - backend:
          service:
            name: am
            port:
              number: 80
        path: /am
        pathType: Prefix

      - backend:
          service:
            name: idm
            port:
              number: 80
        path: /openidm
        pathType: Prefix

      - backend:
          service:
            name: idm
            port:
              number: 80
        path: /upload
        pathType: Prefix

      - backend:
          service:
            name: idm
            port:
              number: 80
        path: /export
        pathType: Prefix

      - backend:
          service:
            name: idm
            port:
              number: 80
        path: /admin
        pathType: Prefix

      - backend:
          service:
            name: idm
            port:
              number: 80
        path: /openicf
        pathType: Prefix

      - backend:
          service:
            name: rcs-agent
            port:
              number: 80
        path: /rcs
        pathType: Prefix

      - backend:
          service:
            name: end-user-ui
            port:
              number: 8080
        path: /enduser
        pathType: Prefix

      - backend:
          service:
            name: admin-ui
            port:
              number: 8080
        path: /platform
        pathType: Prefix

      - backend:
          service:
            name: login-ui
            port:
              number: 8080
        path: /am/XUI
        pathType: Prefix


      # TODO: use this once IG routes have been updated
      # - backend:
      #     service:
      #       name: ig
      #       port:
      #         number: 8080
      #   path: /ig
      #   pathType: Prefix

  tls:
  - hosts:
    - $(FQDN)
    secretName: sslcert
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ig-web
  annotations:
    haproxy-ingress.github.io/ssl-redirect: "true"
    haproxy-ingress.github.io/rewrite-target: "/$2"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    cert-manager.io/cluster-issuer: $(CERT_ISSUER)

spec:
  ingressClassName: "nginx"
  tls:
  - hosts:
    - $(FQDN)
    secretName: sslcert
  rules:
  - host: $(FQDN)
    http:
      paths:
      - backend:
          service:
            name: ig
            port:
              number: 8080
        path: /ig(/|$)(.*)
        pathType: Prefix

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   annotations:
#     cert-manager.io/cluster-issuer: $(CERT_ISSUER)
#     haproxy-ingress.github.io/config-frontend: |
#         use_backend be_idm_websocket_0 if { path /openicf/0 }
#         use_backend be_idm_websocket_1 if { path /openicf/1 }
#         use_backend be_idm_websocket_2 if { path /openicf/2 }
#     haproxy-ingress.github.io/config-sections: |
#         backend be_idm_websocket_dynamic
#             cookie SERVERID insert indirect nocache dynamic
#             dynamic-cookie-key shesellsseashellsontheseashore
#             http-request set-path /openicf
#             option httpchk GET /openidm/info/ping "HTTP/1.1\r\nHost:\ idm\r\n"
#             http-check expect status 200
#             option log-health-checks
#             server-template srv 1-3 _idm._tcp.icf-headless.%[var(txn.namespace)].svc.cluster.local backup resolvers k8s check
#         backend be_idm_websocket_0
#             http-request set-path /openicf
#             option httpchk GET /openidm/info/ping "HTTP/1.1\r\nHost:\ idm\r\n"
#             http-check expect status 200
#             option log-health-checks
#             server idm-0-websocket idm-0.icf-headless.%[var(txn.namespace)].svc.cluster.local:8080 resolvers k8s check
#         backend be_idm_websocket_1
#             http-request set-path /openicf
#             option httpchk GET /openidm/info/ping "HTTP/1.1\r\nHost:\ idm\r\n"
#             http-check expect status 200
#             option log-health-checks
#             server idm-1-websocket idm-1.icf-headless.%[var(txn.namespace)].svc.cluster.local:8080 resolvers k8s check
#         backend be_idm_websocket_2
#             http-request set-path /openicf
#             option httpchk GET /openidm/info/ping "HTTP/1.1\r\nHost:\ idm\r\n"
#             http-check expect status 200
#             option log-health-checks
#             server idm-2-websocket idm-2.icf-headless.%[var(txn.namespace)].svc.cluster.local:8080 resolvers k8s check
#   name: icf-ingress
# spec:
#   ingressClassName: "haproxy"
#   rules:
#   - host: $(FQDN)
#     http:
#       paths:
#       - backend:
#           service:
#             name: icf-headless
#             port:
#               number: 80
#         path: /openicf
#         pathType: Prefix
#   tls:
#   - hosts:
#     - $(FQDN)
#     secretName: sslcert
