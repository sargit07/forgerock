#!/usr/bin/env python3
"""This script starts/deletes a minikube instance"""

import argparse
import sys
import utils
import platform

DEFAULT_K8S_VERSION = "1.23.3"
# Revert when CLOUD-3823 has been resolved
# DEFAULT_K8S_VERSION = "stable"

def main():
    """main"""
    parser = argparse.ArgumentParser(description='Start or delete a minikube instance')
    subparser = parser.add_subparsers(dest='cmd', required=True)
    subparser.add_parser('stop', help='Stop minikube')
    parser_delete = subparser.add_parser('delete', help='Delete minikube')
    parser_delete.add_argument('--skip-confirmation', '-y', help='Skip delete confirmation', action='store_true')
    parser_start = subparser.add_parser('start', help='Start minikube')
    parser_start.add_argument('--version', '-v', help="Set the Kubernetes version (default: stable)", default=DEFAULT_K8S_VERSION)
    parser_start.add_argument('--driver', '-d', help='Runtime driver', choices=['docker', 'hyperkit', 'vb', 'vmware', 'kvm2'], default='')
    parser_start.add_argument('--cpu', '-c', help='Number of CPUs', default='3')
    parser_start.add_argument('--ram', '-r', help='Amount of RAM', default='9g')
    parser_start.add_argument('--disk', '-k', help='Amount of Disk', default='40g')
    args = parser.parse_args()

    if args.cmd == 'delete':
        utils.message('Deleting the minikube instance.')
        if not args.skip_confirmation and input('Do you want to continue? [Y/N] ').lower() not in ['yes', 'y']:
            return
        utils.run('minikube', 'delete')
        return
    
    elif args.cmd == 'start':
        dvr_opts = {
        'docker': '--driver=docker',
        'hyperkit': '--driver=hyperkit',
        'vb': '--driver=virtualbox --bootstrapper kubeadm',
        'vmware': '--driver=vmware',
        'kvm2': '--driver=kvm2'
        }
        dvr = dvr_opts.get(getattr(args, 'driver', None), '')

        if "darwin" in platform.system().lower():
            if args.driver in ['hyperkit', '']:
                utils.run('hyperkit', '-v', cstdout=True, cstderr=True) #check if hyperkit is installed
                dvr = dvr_opts.get('hyperkit', '')
            if args.driver == 'docker':
                utils.error('The docker driver is not supported when deploying the CDK on macOS')
                sys.exit(1)
            if args.driver == 'kvm2':
                utils.error('The kvm2 driver is not available on macOS')
                sys.exit(1)

        _, minikube_ver, _ = utils.run('minikube', 'version --short', cstdout=True)
        minikube_ver = minikube_ver.decode('ascii')
        utils.check_component_version('minikube', minikube_ver)

        k8s_ver = f'--kubernetes-version={args.version}'
        addons = '--addons=ingress,volumesnapshots'
        minikube_args = f'start --cpus={args.cpu} --memory={args.ram} --disk-size={args.disk} --cni=true {k8s_ver} {addons} {dvr}'
        utils.message('Running: "minikube ' + minikube_args + '"')
        utils.run('minikube', minikube_args)
        return
    
    else:
        utils.run('minikube', args.cmd)
    
    

if __name__ == '__main__':
    main()
