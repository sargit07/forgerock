#!/usr/bin/bash
shopt -s globstar
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || (echo "Couldn't determine the root path" ; exit 1)
test_dir=$(mktemp -d)

cat <<-AM > ${test_dir}/am.json
{
    "imageName": "gcr.io/am-tester/am-base/pit1",
    "imageTag": "am-test-tag"
}
AM
cat <<-DS > ${test_dir}/ds.json
{
    "imageName": "gcr.io/ds-tester/ds/pit1",
    "imageTag": "ds-test-tag"
}
DS
cat <<-IDM > ${test_dir}/idm.json
{
    "imageName": "gcr.io/idm-tester/idm/pit1",
    "imageTag": "idm-test-tag"
}
IDM
cat <<-IG > ${test_dir}/ig.json
{
    "imageName": "gcr.io/ig-tester/ig/pit1",
    "imageTag": "ig-test-tag"
}
IG
cat <<-RCS > ${test_dir}/rcs-agent.json
{
    "imageName": "gcr.io/rcs-agent-tester/rcs-agent/pit1",
    "imageTag": "rcs-agent-test-tag"
}
RCS
cat <<-UI > ${test_dir}/ui.json
{
    "imageNameAdmin": "gcr.io/ui-tester/platform-admin-ui/docker-build",
    "imageNameEnduser": "gcr.io/ui-tester/platform-enduser-ui/docker-build",
    "imageNameLogin": "gcr.io/ui-tester/platform-login-ui/docker-build",
    "imageTag": "ui-test-tag"
}
UI

declare -A docker_test_table
declare -A kustomize_test_table
docker_test_table[am]=2
docker_test_table[ds]=6
docker_test_table[ig]=1
kustomize_test_table[ui]=3
kustomize_test_table[rcs-agent]=1


git checkout -- docker kustomize
## Test configuration from files
### does not test repo checkout functionality
for key in "${!docker_test_table[@]}"; do
    $SCRIPT_DIR/../../bin/set-images --products ${key} --log-level debug --config-path ${test_dir}
    count=$(grep "${key}-test-tag" docker/{am,ds,idm,ig,amster}/**/Dockerfile | wc -l)
    if [[ $count != ${docker_test_table[$key]} ]];
    then
        echo "expected: ${key} to have ${docker_test_table[$key]} tag name changes"
        echo "found: ${key} to have $count changes"
        exit 1;
    fi
    count=$(grep "${key}-tester" docker/{am,ds,idm,ig,amster}/**/Dockerfile | wc -l)
    if [[ $count != ${docker_test_table[$key]} ]];
    then
        echo "expected: ${key} to have ${docker_test_table[$key]} repo name changes"
        echo "found: ${key} to have $count changes"
        exit 1;
    fi
done



git checkout -- docker kustomize
### Test kustomize changes
for key in "${!kustomize_test_table[@]}"; do
    $SCRIPT_DIR/../../bin/set-images --products ${key} --log-level debug --config-path ${test_dir}
    count=$(grep "${key}-test-tag" kustomize/base/{rcs-agent,login-ui,end-user-ui,admin-ui}/**/*.yaml | wc -l)
    if [[ $count != ${kustomize_test_table[$key]} ]];
    then
        echo "expected: ${key} to have ${kustomize_test_table[$key]} changes"
        echo "found: ${key} to have $count changes"
        exit 1;
    fi
    count=$(grep "${key}-tester" kustomize/base/{rcs-agent,login-ui,end-user-ui,admin-ui}/**/*.yaml | wc -l)
    if [[ $count != ${kustomize_test_table[$key]} ]];
    then
        echo "expected: ${key} to have ${kustomize_test_table[$key]} repo name changes"
        echo "found: ${key} to have $count changes"
        exit 1;
    fi
done

## END Test configuration from files

git checkout -- docker kustomize
## Test CLI ARGS
### update just repo
$SCRIPT_DIR/../../bin/set-images --log-level debug --config-path ${test_dir} --update-repo myrepotest
count=$(grep -ER "myrepotest|*-test-tag" {docker,kustomize}/**/* | wc -l)
if [[ $count != 50 ]];
then
    echo "expected: 50 repo name changes"
    echo "found: $count changes"
    exit 1;
fi

### Update just tag
$SCRIPT_DIR/../../bin/set-images --log-level debug --config-path ${test_dir} --update-tag mytag
count=$(grep -ER "*-tester|mytag" {docker,kustomize}/**/* | wc -l)
if [[ $count != 50 ]];
then
    echo "expected: 50 tag name changes"
    echo "found: $count changes"
    exit 1;
fi

## END Test CLI ARGS
# Test parser functions
$SCRIPT_DIR/../../bin/set-images --run-tests
git checkout -- docker kustomize
echo "Tests completed"
