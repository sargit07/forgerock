#!/usr/bin/env bash
# A sample backup script. 
# Modify this script to suit your requirements. 
#
#
# 
# This is done offline, and is expected to be run by a job that runs to termination

set -ex

# Target directory to export data to
BACKUP_DIR=${BACKUP_DIR:-/backup}

# This is csv seperated list of backup methods to run in sequence.
# Valid types are tar,ldif,dsbackup
# Defaults to all 3 methods..
BACKUP_TYPE=${DS_BACKUP_TYPE:-"tar,ldif,dsbackup"}

DEST="$BACKUP_DIR/$NAMESPACE"
mkdir -p  $DEST


configBackup() {
    echo "backing up configuration files"
    (cd $DS_DATA_DIR && tar cvfz $DEST/config.tar.gz config var lib)
}

tarBackup() {
    echo "Taking a tar backup of the persistent volume"
    (cd $DS_DATA_DIR && tar cvzf $DEST/ds-data.tar.gz *)
}


# The DS server version needs to match the JE data version before any backup can be attempted
echo "Upgrading configuration and data..."
./upgrade --dataOnly --acceptLicense --force --ignoreErrors --no-prompt

# Calculate the list of backends.
mapfile -t BACK_ENDS < <(./bin/ldifsearch -b cn=backends,cn=config -s one $DS_DATA_DIR/config/config.ldif "(&(objectclass=ds-cfg-pluggable-backend)(ds-cfg-enabled=true))" ds-cfg-backend-id | grep "^ds-cfg-backend-id" | cut -c20-)
echo "Backends ${BACK_ENDS[@]}"


ldifBackup() {
    for B in "${BACK_ENDS[@]}"; do
        F="$DEST/$B.ldif.gz"
        echo "Backing up $B to $F"
        export-ldif --ldifFile $F --backendId $B --offline --compress    
    done
}

dsbackupCmd() {
    dsbackup create --offline --backupLocation "$DEST/dsbackup" 
}

# Always backup config files
configBackup

for type in ${BACKUP_TYPE//,/ }
do
    echo "Running backup type $type"
    case $type in
        tar)
            tarBackup
            ;;
        ldif)
            ldifBackup
            ;;
        dsbackup)
            dsbackupCmd
            ;;
        *)
            echo "Skipping unknown backup type $type"
            ;;
    esac
done

echo "done"

