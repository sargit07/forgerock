#!/usr/bin/env bash
# Sample script to restore data taken from the backup script
# This is done with the directory offline, and is expected to be run by a Kubernetes job that runs to termination.
# On completion of the restore, the pvc can be snapshotted and that snapshot used to initialize a new directory instance.
#
# Currently the restore untar's the persistent data taken by the backup scripts.
# It does NOT perform an ldif-import. 
#
# This is a sample script. Modify the script per your requireements. 
#

set -e

NAMESPACE=${NAMESPACE:-default}

# Backup type is  tar,ldif or dsbackup
# You can restore one or more of these types in sequence.
BACKUP_TYPE="${DS_BACKUP_TYPE:-tar,ldif,dsbackup}"
SOURCE="/backup/$NAMESPACE"

[ -d "$SOURCE" ] || {
    echo "Directory $SOURCE DOES NOT exist."
    exit 1
}

configRestore() {
    echo "Restoring configuration files"
    tar --no-overwrite-dir -C $DS_DATA_DIR -xvzf $SOURCE/config.tar.gz
}


tarRestore() {
    echo "Restoring tar backup found in $SOURCE:"
    tar --no-overwrite-dir -C $DS_DATA_DIR -xvzf $SOURCE/ds-data.tar.gz
}

ldifRestore() {
    LDIF=$(cd $SOURCE; ls *.ldif.gz)

    for F in $LDIF
    do
        # Strip the .ldif or .ldif.gz from the filename to get backend name
        BACKEND=$(echo $F | sed -e s/\.ldif\.*//g)
        if [[ $F =~ ".gz" ]]; then
            echo "=> Importing compressed $F to $BACKEND"
            import-ldif --clearBackend --ldifFile "${SOURCE}/$F" --backendId ${BACKEND} --offline --isCompressed
        else
            echo "=> Importing $F to $BACKEND"
            import-ldif --clearBackend --ldifFile "${SOURCE}/$F" --backendId ${BACKEND} --offline
        fi
    done
}

dsbackupRestore() {
    SRC=$SOURCE/dsbackup
     # Get a list of all the last backups
    BACKENDS=$(dsbackup list --offline  --backupLocation $SRC --last | grep "Backup ID" | awk '{print $NF}' )

    for B in $BACKENDS
    do
        echo "Restoring id $B"
        echo dsbackup restore --offline --backupLocation $SRC --backupId $B
        dsbackup restore --offline  --backupLocation $SRC --backupId $B
    done
}


for type in ${BACKUP_TYPE//,/ }
do
    echo "Running restore type $type"
    case $type in
        config)
            configRestore
            ;;
        tar)
            tarRestore
            ;;
        ldif)
            ldifRestore
            ;;
        dsbackup)
            dsbackupRestore
            ;;
        *)
            echo "Unknown backup type $type"
            exit 1
            ;;
    esac
done
